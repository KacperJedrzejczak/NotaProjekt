@page "/notes"
@inject BlazorNotatnik.Data.NoteService NoteService
@inject NavigationManager NavigationManager
<br />
<br />
<h3>Lista notatek</h3>

<div class="input-group mb-3">
  <div class="input-group-prepend">
    <span class="input-group-text" id="basic-addon1">Szukajka</span>
  </div>
    <input type="text" class="form-control" placeholder="Wyszukaj tytuł..." aria-label="Username" aria-describedby="basic-addon1" @bind="searchTerm" @oninput="SearchNotes">
</div>

<br />
<br />
@if (notes != null)
{
    <ul>
        <div class="notes-container">
        @foreach (var note in notes)
        {
            <div class="note-card">
                <h4>@note.Title</h4>
                <p>@note.Content</p>
                <button type="button" class="btn btn-success" @onclick="() => EditNote(note.Id)">Edytuj</button>
                <button type="button" class="btn btn-danger" @onclick="() => DeleteNote(note.Id)">Usuń</button>
            </div>
        }
        </div>
    </ul>
}
else
{
    <p>Ładowanie notatek...</p>
}

@code {
    private List<Note> notes;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        notes = await NoteService.GetNotes();
    }

    private void EditNote(int noteId)
    {
        NavigationManager.NavigateTo($"/editnote/{noteId}");
    }

    private async Task DeleteNote(int noteId)
    {
        await NoteService.DeleteNote(noteId);
        notes = await NoteService.GetNotes();
    }

    private async Task SearchNotes(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            notes = await NoteService.GetNotes();
        }
        else
        {
            notes = await NoteService.SearchNotesByTitle(searchTerm);
        }
    }
}
